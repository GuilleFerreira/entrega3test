<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Library</name>
    </assembly>
    <members>
        <member name="T:Library.Chat">
            <summary>
            Clase que representa un chat.
            </summary>
        </member>
        <member name="M:Library.Chat.EnviarMensaje(System.String)">
            <summary>
            Envia un mensaje al usuario.
            </summary>
            <param name="mensaje">parametro mensaje que envia al usuario.</param>
        </member>
        <member name="M:Library.Chat.RecibirMensaje">
            <summary>
            Recibe el mensaje del usuario.
            </summary>
        </member>
        <member name="T:Library.Clasificacion">
            <summary>
            Esta clase representa una clasificación de un material.
            </summary>
        </member>
        <member name="M:Library.Clasificacion.#ctor(System.String,System.String)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Library.Clasificacion"/>.
            </summary>
            <param name="nombre"> parametro nombre recibido por el constructor.</param>
            <param name="descripcion">parametro descripcion recibido por el constructor.</param>
        </member>
        <member name="P:Library.Clasificacion.Nombre">
            <summary>
            Obtiene un valor que indica el nombre de la clasificación.
            </summary>
            <value>this.nombre.</value>
        </member>
        <member name="P:Library.Clasificacion.Descripcion">
            <summary>
            Obtiene un valor que indica la descripcion de la clasificación.
            </summary>
            <value>this.descripcion.</value>
        </member>
        <member name="T:Library.Contenedor">
            <summary>
            Esta clase representa un contenedor de las diferentes clases del bot.
            Utilzia el patron de diseño Singleton. Pues solo se puede tener una instancia de esta clase.
            Es la clase EXPERTA en contener las diferentes instancias del programa.
            Ademas se cumple SRP pues su unica razon para cambiar es que se cambie la forma de almacenar las instancias.
            </summary>
        </member>
        <member name="P:Library.Contenedor.Instancia">
            <summary>
            Obtiene una instancia de la clase Contenedor y si no existe la crea.
            </summary>
            <value>this.contenedor.</value>
        </member>
        <member name="P:Library.Contenedor.Habilitaciones">
            <summary>
            Obtiene un valor con la habilitacion correspondiente.
            </summary>
            <value>this.habilitaciones.</value>
        </member>
        <member name="P:Library.Contenedor.Rubros">
            <summary>
            Obtiene un valor con la lista de rubros.
            </summary>
            <value>this.rubros.</value>
        </member>
        <member name="P:Library.Contenedor.Clasificaciones">
            <summary>
            Obtiene un valor con la lista de clasificaciones.
            </summary>
            <value>this.clasificaciones.</value>
        </member>
        <member name="P:Library.Contenedor.Ofertas">
            <summary>
            Obtiene un valor con la lista de las ofertas.
            </summary>
            <value>this.ofertas.</value>
        </member>
        <member name="P:Library.Contenedor.Emprendedores">
            <summary>
            Obtiene un valor con la lista de los Emprendedores.
            </summary>
            <value>this.emprendedores.</value>
        </member>
        <member name="P:Library.Contenedor.Empresas">
            <summary>
            Obtiene un valro con la lsita de las Empresas.
            </summary>
            <value>this.empresas.</value>
        </member>
        <member name="M:Library.Contenedor.AddHabilitacion(Library.Habilitacion)">
            <summary>
            Añiade una habilitacion a la lista de habilitaciones.
            </summary>
            <param name="habilitacion">parametro habilitacion que recibe AddHabilitacion.</param>
        </member>
        <member name="M:Library.Contenedor.RemoveHabiltiacion(Library.Habilitacion)">
            <summary>
            Remueve una habilitacion de la lista de habilitaciones.
            </summary>
            <param name="habilitacion">parametro habilitacion que recibe RemoveHabilitacion.</param>
        </member>
        <member name="M:Library.Contenedor.AddRubro(Library.Rubro)">
            <summary>
            Añiade un rubro a la lista de rubros.
            </summary>
            <param name="rubro">parametro rubro que recibe RemoveRubro.</param>
        </member>
        <member name="M:Library.Contenedor.RemoveRubro(Library.Rubro)">
            <summary>
            Remueve un rubro de la lista de rubros.
            </summary>
            <param name="rubro">parametro rubro que recibe RemoveRubro.</param>
        </member>
        <member name="M:Library.Contenedor.AddClasificacion(Library.Clasificacion)">
            <summary>
            Añiade una clasificacion a la lista de clasificaciones.
            </summary>
            <param name="clasificacion">parametro clasificacion que recibe AddClasificacion.</param>
        </member>
        <member name="M:Library.Contenedor.RemoveClasificacion(Library.Clasificacion)">
            <summary>
            Remueve una clasificacion de la lista de clasificaciones.
            </summary>
            <param name="clasificacion">parametro clasificacion que recibe Removelasificacion.</param>
        </member>
        <member name="M:Library.Contenedor.AddOferta(Library.Oferta)">
            <summary>
            Añiade una oferta a la lista de ofertas.
            </summary>
            <param name="oferta">parametro oferta recibido por el metodo AddOferta.</param>
        </member>
        <member name="M:Library.Contenedor.RemoveOferta(Library.Oferta)">
            <summary>
            Remueve una oferta de la lista de ofertas.
            </summary>
            <param name="oferta">parametro oferta recibido por el metodo RemoveOferta.</param>
        </member>
        <member name="M:Library.Contenedor.AddEmprendedor(Library.Emprendedor)">
            <summary>
            Agrega un Emprendedor a la lista de emprendedores.
            </summary>
            <param name="emprendedor">parametro oferta recibido por el metodo RemoverOferta.</param>
        </member>
        <member name="M:Library.Contenedor.RemoveEmprendedor(Library.Emprendedor)">
            <summary>
            Remueve un emprendedor de la lista de emprendedores.
            </summary>
            <param name="emprendedor">parametro emprendedor recibido por el metodo RemoverEmprendedor.</param>
        </member>
        <member name="M:Library.Contenedor.AddEmpresa(Library.Empresa)">
            <summary>
            Añiade una empresa a la lista de empresas.
            </summary>
            <param name="empresa">parametro empresa recibido por el metodo AgregarEmpresa.</param>
        </member>
        <member name="M:Library.Contenedor.RemoveEmpresa(Library.Empresa)">
            <summary>
            Remueve una empresa de la lista de empresas.
            </summary>
            <param name="empresa">parametro empresa recibido por el metodo RemoveEmpresa.</param>
        </member>
        <member name="T:Library.Habilitacion">
            <summary>
            Esta clase representa una Habilitacion basica.
            </summary>
        </member>
        <member name="M:Library.Habilitacion.#ctor(System.String,System.String)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Library.Habilitacion"/>.
            </summary>
            <param name="name">Parametro name que recibe el constructor de la habilitacion.</param>
            <param name="descripcion">Parametro descripcion que recibe el constructor de la habilitacion.</param>
        </member>
        <member name="P:Library.Habilitacion.Name">
            <summary>
            Obtiene un valor que indica el nombre de la habilitacion.
            </summary>
            <value>this.name.</value>
        </member>
        <member name="P:Library.Habilitacion.Descripcion">
            <summary>
            Obtiene un valor que indica la descripcion de la habilitacion.
            </summary>
            <value>this.descripcion.</value>
        </member>
        <member name="T:Library.Rubro">
            <summary>
            Clase que representa los rubros.
            </summary>
        </member>
        <member name="M:Library.Rubro.#ctor(System.String,System.String,System.String)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Library.Rubro"/>.
            </summary>
            <param name="nombre">El nombre del rubro.</param>
            <param name="area">El area del Rubro.</param>
            <param name="descripcion">La descripcion del rubro.</param>
        </member>
        <member name="P:Library.Rubro.Nombre">
            <summary>
            Obtiene un valor que indica el nombre del rubro.
            </summary>
            <value>El nombre del Rubro.</value>
        </member>
        <member name="P:Library.Rubro.Area">
            <summary>
            Obtiene un valor que indica el area del rubro.
            </summary>
            <value>El area del Rubro.</value>
        </member>
        <member name="P:Library.Rubro.Descripcion">
            <summary>
            Obtiene un valor que indica la descripcion del rubro.
            </summary>
            <value>La descripcion del Rubro.</value>
        </member>
        <member name="T:Library.IChat">
            <summary>
            Interface que representa la firma de los metodos de IChat. Se utiliza una interface, pues la idea
            detras es poseer una interfaz que posea todos los metodos que se necesitan para el funcionamiento 
            de un chat, pero a su vez que la clase que dependa de esta interfaz no este forzada a implmenetarlos 
            de una manera determinada impidiendo asi que sea necesario modificar cualquier clase del tipo IChat
            dependiendo de las necesidades del usuario.
            </summary>
        </member>
        <member name="M:Library.IChat.EnviarMensaje(System.String)">
            <summary>
            Envia un mensaje al usuario.
            </summary>
            <param name="mensaje">parametro mensaje que envia al usuario.</param>
        </member>
        <member name="M:Library.IChat.RecibirMensaje">
            <summary>
            Recibe el mensaje del usuario.
            </summary>
        </member>
        <member name="T:Library.IManejoDeDatos">
            <summary>
            Interface con la firma de los métodos que debe tener un manejador de datos.
            </summary>
        </member>
        <member name="M:Library.IManejoDeDatos.GuardarInfo(System.String,System.String)">
            <summary>
            Guarda los datos en un archivo.
            </summary>
            <param name="dondeGuardar">parametro que indica donde se va a guardar el archivo.</param>
            <param name="nombreArchivo">parametro que indica el nombre del archivo a guardar.</param>
        </member>
        <member name="M:Library.IManejoDeDatos.DevolverInfo(System.String)">
            <summary>
            Devuelve los datos de un archivo.
            </summary>
            <param name="dondeBuscar">parametro que indica donde va a buscar el archivo.</param>
        </member>
        <member name="T:Library.Busqueda">
            <summary>
            Esta clase representa la busqueda de ofertas a partir de palabras claves, ubicacion y clasificacion.
            Se utilzia el principio SRP, donde la unica razon para cambiar de la clase es que se modifique la forma en que se busca la informacion.
            Ademas se usa el patron Singleton pues solo se debe tener una instancia de esta clase.
            </summary>
        </member>
        <member name="P:Library.Busqueda.Instancia">
            <summary>
            Obtiene una instancia de la clase Busqueda y si no existe una, crea una nueva.
            </summary>
            <value>una instancia de busqueda.</value>
        </member>
        <member name="M:Library.Busqueda.BuscarOferta(Library.Emprendedor,System.String,Library.Contenedor)">
            <summary>
            La función para buscar ofertas reciben un string con las palabras a buscar y
            revisa cada oferta para ver si las palabras claves coinciden.
            Luego comprueba si el emprendedor tiene las habilitaciones necesarias para acceder a la oferta.
            Retornando una lista temporal para que el usuario reciba solo las ofertas que coincidan.
            Contenedor basededatos se usa como una db temporal.
            </summary>
            <param name="emprendedor">Es el usuario que busca las ofertas.</param>
            <param name="mensaje">Son las palabras claves que busca el emprendedor.</param>
            <param name="basededatos">Es la base de datos donde se buscan las ofertas disponibles.</param>
            <returns>Lista de ofertas que cumplen con los requisitos.</returns>
        </member>
        <member name="M:Library.Busqueda.BuscarOferta(Library.Emprendedor,Library.Ubicacion,Library.Contenedor)">
            <summary>
            En este caso la funcion busqueda recibe la ubicación en la que se quiere buscar.
            revisa cada oferta para ver si la ubicacion coincide con ubicación buscada.
            Retornando una lista temporal para que el usuario reciba solo las ofertas que coincidan.
            Contenedor basededatos se usa como una db temporal.
            </summary>
            <param name="emprendedor">Es el usuario que busca las ofertas.</param>
            <param name="ubicacion">Ubicacion buscada por el emprendedor.</param>
            <param name="basededatos">Es la base de datos donde se buscan las ofertas disponibles.</param>
            <returns>Lista de ofertas que cumplen con los requisitos.</returns>
        </member>
        <member name="M:Library.Busqueda.BuscarOferta(Library.Emprendedor,Library.Clasificacion,Library.Contenedor)">
            <summary>
            En este caso la funcion busqueda recibe clasificacion del material.
            revisa la clasificacion de los materiales de cada oferta para ver si son iguales.
            Retornando una lista temporal para que el usuario reciba solo las ofertas que coincidan.
            Contenedor basededatos se usa como una db temporal.
            </summary>
            <param name="emprendedor">Es el usuario que busca las ofertas.</param>
            <param name="clasificacion">Clasificacion buscada por el emprendedor.</param>
            <param name="basededatos">Es la base de datos donde se buscan las ofertas disponibles.</param>
            <returns>Lista de ofertas que cumplen con los requisitos.</returns>
        </member>
        <member name="T:Library.Material">
            <summary>
            Clase que representa al Material.
            Es una clase experta en crear materiales. Y tiene la sola responsabilidad de crear materiales. (SRP).
            </summary>
        </member>
        <member name="M:Library.Material.#ctor(System.String,Library.Clasificacion,System.Int32,System.String,System.Double)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Library.Material"/>.
            </summary>
            <param name="nombre">El nombre del material.</param>
            <param name="clasificacion">La clasificacion del material.</param>
            <param name="cantidad">La cantidad de la unidad.</param>
            <param name="unidad">La unidad del material.</param>
            <param name="valor">El valor de la unidad.</param>
        </member>
        <member name="P:Library.Material.Clasificacion">
            <summary>
            Obtiene la clasificacion del material.
            </summary>
            <value>la clasificacion del material.</value>
        </member>
        <member name="P:Library.Material.Cantidad">
            <summary>
            Obtiene un valor que indica la cantidad del material.
            </summary>
            <value>la cantidad de la unidad.</value>
        </member>
        <member name="P:Library.Material.Unidad">
            <summary>
            Obtiene un valor que indica la unidad del material.
            </summary>
            <value>la unidad en la cual se va a medir.</value>
        </member>
        <member name="P:Library.Material.Valor">
            <summary>
            Obtiene un valor que indica el valor del material.
            </summary>
            <value>el valor de la unidad.</value>
        </member>
        <member name="P:Library.Material.Nombre">
            <summary>
            Obtiene un valor que indica el nombre del material.
            </summary>
            <value>el nombre del material.</value>
        </member>
        <member name="T:Library.Oferta">
            <summary>
            Esta clase representa una oferta. Es una subclase de OfertaBase
            Esto se debe a porque al ser una oferta recurrente necesita una property que es fechaDeGeneracion.
            </summary>
        </member>
        <member name="M:Library.Oferta.#ctor(System.String,Library.Empresa,System.String,System.String,System.String,Library.Clasificacion,System.Int32,System.String,System.Double,System.DateTime)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Library.Oferta"/>.
            </summary>
            <param name="nombreoferta">parametro nombre de la oferta.</param>
            <param name="empresa">parametro empresa que oferta.</param>
            <param name="ciudad">ciuadad donde se encuentra la oferta.</param>
            <param name="calle">callle donde se encuentra la oferta.</param>
            <param name="nombreMaterial">nombre del material donde se encuentra la oferta.</param>
            <param name="clasificacion">clasificacion del material.</param>
            <param name="cantidad">cantidad del material.</param>
            <param name="unidad">unidad del material.</param>
            <param name="valor">valor del material.</param>
            <param name="fechaDeGeneracion">cuando se genera la oferta.</param>
        </member>
        <member name="P:Library.Oferta.FechadeGeneracion">
            <summary>
            Obtiene o establece cuando la oferta va a ser generada.
            </summary>
            <value>La fecha de la generacion.</value>
        </member>
        <member name="T:Library.OfertaBase">
            <summary>
            Clase abstracta que representa la base de oferta. 
            Es experta en la creación de ofertas.
            Ademas se utiliza el patron creator, pues los materiales son creados al momento de inicializar la oferta.
            Pues oferta usa de forma muy cercana los materiales. => oferta tiene la responsabilidad de crear materiales.
            Se utilizo una clase abstracta de oferta, pues se requieren tener dos tipos diferentes de oferta en el programa,
            con properties diferentes. Por lo tanto tener instanciada una clase abstracta de oferta, facilita el codigo.
            Ademas que deja abierto a la posibilidad de crear otras ofertas mediante la herencia de OfertaBase.
            </summary>
        </member>
        <member name="M:Library.OfertaBase.#ctor(System.String,Library.Empresa,System.String,System.String,System.String,Library.Clasificacion,System.Int32,System.String,System.Double)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Library.OfertaBase"/>.
            </summary>
            <param name="nombreoferta">Nombre de la oferta a crear.</param>
            <param name="empresa">Empresa que crea la oferta.</param>
            <param name="ciudad">Ciudad donde se encuentra la oferta.</param>
            <param name="calle">Calle donde esta la oferta.</param>
            <param name="nombreMaterial">Nombre del material a ofertar.</param>
            <param name="clasificacion">Clasificación del material.</param>
            <param name="cantidad">Cantidad a ofertar.</param>
            <param name="unidad">Unidad del material.</param>
            <param name="valor">Valor de la oferta.</param>
        </member>
        <member name="P:Library.OfertaBase.Nombreoferta">
            <summary>
            Obtiene o establece el nombre de la oferta.
            </summary>
            <value>Nombre de la oferta.</value>
        </member>
        <member name="P:Library.OfertaBase.FechaVenta">
            <summary>
            Obtiene o establece fecha en la cual se realizo la venta.
            </summary>
            <value>Fecha de la venta.</value>
        </member>
        <member name="P:Library.OfertaBase.Material">
            <summary>
            Obtiene o establece material ofertado en la oferta.
            </summary>
            <value>Material ofrecido.</value>
        </member>
        <member name="P:Library.OfertaBase.Empresa">
            <summary>
            Obtiene empresa que realiza la oferta.
            </summary>
            <value>Empresa que oferta.</value>
        </member>
        <member name="P:Library.OfertaBase.Ubicacion">
            <summary>
            Obtiene o establece ubicación de la oferta.
            </summary>
            <value>Ubicacion de la oferta.</value>
        </member>
        <member name="P:Library.OfertaBase.PalabrasClaves">
            <summary>
            Obtiene palabras clave de la oferta, estas sirven para su futura busqueda.
            </summary>
            <value>Palabras clave de la oferta.</value>
        </member>
        <member name="P:Library.OfertaBase.Habilitaciones">
            <summary>
            Obtiene lista de habilitaciones nesesarias para poder adquirir la oferta.
            </summary>
            <value>retorna this.habilitaciones.</value>
        </member>
        <member name="M:Library.OfertaBase.AddHabilitacion(Library.Habilitacion)">
            <summary>
            Añade habilitaciones a la lista.
            </summary>
            <param name="habilitacion">Habilitaciones necesarias para adquirir la oferta.</param>
        </member>
        <member name="M:Library.OfertaBase.AddPalabraClave(System.String)">
            <summary>
            Añade palabras clave a la lista.
            </summary>
            <param name="palabraClave">Palabras clave para buscar la oferta.</param>
        </member>
        <member name="T:Library.OfertaRecurrente">
            <summary>
            Esta clase representa una oferta recurrente. Es una subclase de OfertaBase
            Esto se debe a porque al ser una oferta recurrente necesita una property que es recurrenciaMensual.
            </summary>
        </member>
        <member name="M:Library.OfertaRecurrente.#ctor(System.String,Library.Empresa,System.String,System.String,System.String,Library.Clasificacion,System.Int32,System.String,System.Double,System.Int32)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Library.OfertaRecurrente"/>.
            </summary>
            <param name="nombreoferta">parametro nombre de la oferta.</param>
            <param name="empresa">parametro empresa que oferta.</param>
            <param name="ciudad">ciuadad donde se encuentra la oferta.</param>
            <param name="calle">callle donde se encuentra la oferta.</param>
            <param name="nombreMaterial">nombre del material donde se encuentra la oferta.</param>
            <param name="clasificacion">clasificacion del material.</param>
            <param name="cantidad">cantidad del material.</param>
            <param name="unidad">unidad del material.</param>
            <param name="valor">valor del material.</param>
            <param name="recurrenciaMensual">cuantas veces se repite en un mes.</param>
        </member>
        <member name="P:Library.OfertaRecurrente.RecurrenciaMensual">
            <summary>
            Obtiene o establece el número de veces que se repite la oferta en un mes.
            </summary>
            <value>this.RecurrenciaMensual.</value>
        </member>
        <member name="T:Library.Ubicacion">
            <summary>
            Esta clase representa una ubicacion.
            </summary>
        </member>
        <member name="M:Library.Ubicacion.#ctor(System.String,System.String)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Library.Ubicacion"/>.
            </summary>
            <param name="ciudad">parametro ciudad que recibe el constructor.</param>
            <param name="calle">parametro calle que recibe el constructor.</param>
        </member>
        <member name="P:Library.Ubicacion.Ciudad">
            <summary>
             Obtiene o establece la ciudad.
            </summary>
            <value>this.ciudad.</value>
        </member>
        <member name="P:Library.Ubicacion.Calle">
            <summary>
            Obtiene o establece la calle.
            </summary>
            <value>this.calle.</value>
        </member>
        <member name="T:Library.Admin">
            <summary>
            Esta clase representa un Administrador de la aplicacion.
            </summary>
        </member>
        <member name="M:Library.Admin.#ctor(System.String)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Library.Admin"/>.
            </summary>
            <param name="nombre">parametro que recibe el nombre del admin.</param>
        </member>
        <member name="P:Library.Admin.Nombre">
            <summary>
            Obtiene o establece un valor que indica el nombre del admin.
            </summary>
            <value>this.nombre.</value>
        </member>
        <member name="M:Library.Admin.InvitarEmpresa(System.String)">
            <summary>
            Invita a una Empresa.
            </summary>
            <param name="userEmpresa">parametro userEmpresa que represneta el usuario de la empresa a inviatr.</param>
        </member>
        <member name="T:Library.Emprendedor">
            <summary>
            Esta clase representa un Emprendedor.
            Patrones y principios utilizados:
            EXPERT, porque el emprendedor es una clase experta en la inficación que debe poseer un emprendedor.
            </summary>
        </member>
        <member name="M:Library.Emprendedor.#ctor(System.String,Library.Rubro,System.String,System.String,System.String)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Library.Emprendedor"/>.
            </summary>
            <param name="nombre">parametro nombre recibido por el constructor del emprendedor.</param>
            <param name="rubro">parametro rubro recibido por el constructor del emprendedor.</param>
            <param name="ciudad">parametro ciudad recibido por el constructor del emprendedor.</param>
            <param name="calle">parametro calle recibido por el constructor del emprendedor.</param>
            <param name="especializacion">parametro especializacion recibidio por el constructor del emprendedor.</param>
        </member>
        <member name="P:Library.Emprendedor.Especializacion">
            <summary>
            Obtiene o establece un valor que indica la especializacion del emprendedor.
            </summary>
            <value>this.especializacon.</value>
        </member>
        <member name="P:Library.Emprendedor.Habilitaciones">
            <summary>
            Obtiene el valor de las habilitaciones del emprendedor.
            </summary>
            <value>this.habilitaciones.</value>
        </member>
        <member name="M:Library.Emprendedor.AddHabilitacion(Library.Habilitacion)">
            <summary>
            Agrega una habilitacion al emprendedor.
            </summary>
            <param name="habilitacion">parametro habilitaciones que recibe el metodo AddHabilitacion.</param>
        </member>
        <member name="M:Library.Emprendedor.RemoveHabilitacion(Library.Habilitacion)">
            <summary>
            Remueve una habilitacion al emprendedor.
            </summary>
            <param name="habilitacion">parametro habilitaciones que recibe el metodo RemoveHabilitacion.</param>
        </member>
        <member name="T:Library.Empresa">
            <summary>
            Clase que representa una Empresa.
            Patrones y principios utilizados:
            EXPERT, porque conoce toda la informacion que debe conocer una empresa.
            </summary>
        </member>
        <member name="M:Library.Empresa.#ctor(System.String,Library.Rubro,System.String,System.String)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Library.Empresa"/>.
            </summary>
            <param name="nombre">parametro nombre recibido por el constructor de empresa.</param>
            <param name="rubro">parametro rubro recibido por el constructor de la empresa.</param>
            <param name="ciudad">parametro ciudad recibido por el constructor de la emrpesa.</param>
            <param name="calle">parametro calle recibido por el constructor de la empresa.</param>
        </member>
        <member name="T:Library.Usuario">
            <summary>
            Esta clase representa un usuario de la aplicación.
            Es una clase abstracta, por lo que no puede ser instanciada.
            Representa a un usuario de la aplicación de manera general.
            </summary>
        </member>
        <member name="M:Library.Usuario.#ctor(System.String,Library.Rubro,System.String,System.String)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Library.Usuario"/>.
            </summary>
            <param name="nombre">parametro nombre recibido por el constructor del usuario.</param>
            <param name="rubro">parametro rubro recibido por el constructor del usuario.</param>
            <param name="ciudad">parametro ciudad recibido por el constructor del usuario.</param>
            <param name="calle">parametro calle recibido por el constructor del usuario.</param>
        </member>
        <member name="P:Library.Usuario.Nombre">
            <summary>
            Obtiene o establece un valor el nombre del usuario.
            </summary>
            <value>this.nombre.</value>
        </member>
        <member name="P:Library.Usuario.Rubro">
            <summary>
            Obtiene o establece un valor que es el rubro del usuario.
            </summary>
            <value>this.rubro.</value>
        </member>
        <member name="P:Library.Usuario.Ubicacion">
            <summary>
            Obtiene o establece un valor que indica la ubicacion del usuario.
            </summary>
            <value>this.ubicacion.</value>
        </member>
        <member name="P:Library.Usuario.RegistroUsuario">
            <summary>
            Obtiene un valor que indica el registro del usuario.
            </summary>
            <value>this.registroUsuario.</value>
        </member>
        <member name="M:Library.Usuario.AddToRegister(Library.OfertaBase)">
            <summary>
            Añiade al registro del usuario la oferta.
            </summary>
            <param name="oferta">Parametro.</param>
        </member>
        <member name="M:Library.Usuario.BuscarEnRegistro(System.DateTime)">
            <summary>
            Busca en el registro del usuario.
            </summary>
            <param name="fechaDesde">Parametro que indica la fechaDesde donde se desea buscar.</param>
            <returns>una lista de ofertas llamada resultado.</returns>
        </member>
    </members>
</doc>

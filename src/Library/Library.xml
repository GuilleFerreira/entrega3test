<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Library</name>
    </assembly>
    <members>
        <member name="T:Library.Clasificacion">
            <summary>
            Esta clase representa una clasificación de un material.
            </summary>
        </member>
        <member name="M:Library.Clasificacion.#ctor(System.String,System.String)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Library.Clasificacion"/>.
            </summary>
            <param name="nombre"> parametro nombre recibido por el constructor.</param>
            <param name="descripcion">parametro descripcion recibido por el constructor.</param>
        </member>
        <member name="P:Library.Clasificacion.Nombre">
            <summary>
            Obtiene un valor que indica el nombre de la clasificación.
            </summary>
            <value>this.nombre.</value>
        </member>
        <member name="P:Library.Clasificacion.Descripcion">
            <summary>
            Obtiene un valor que indica la descripcion de la clasificación.
            </summary>
            <value>this.descripcion.</value>
        </member>
        <member name="T:Library.Contenedor">
            <summary>
            Esta clase representa un contenedor de las diferentes clases del bot.
            </summary>
        </member>
        <member name="P:Library.Contenedor.Instancia">
            <summary>
            Obtiene una instancia de la clase Contenedor y si no existe la crea.
            </summary>
            <value>this.contenedor.</value>
        </member>
        <member name="P:Library.Contenedor.Habilitaciones">
            <summary>
            Devuelve un valor con la habilitacion correspondiente.
            </summary>
            <value>this.habilitaciones.</value>
        </member>
        <member name="P:Library.Contenedor.Rubros">
            <summary>
            Devuelve un valor con la lista de rubros.
            </summary>
            <value>this.rubros.</value>
        </member>
        <member name="P:Library.Contenedor.Clasificaciones">
            <summary>
            Devuelve un valor con la lista de clasificaciones.
            </summary>
            <value>this.clasificaciones.</value>
        </member>
        <member name="P:Library.Contenedor.Ofertas">
            <summary>
            Devuelve un valor con la lista de las ofertas.
            </summary>
            <value>this.ofertas.</value>
        </member>
        <member name="P:Library.Contenedor.Emprendedores">
            <summary>
            Devuelve un valor con la lista de los Emprendedores.
            </summary>
            <value>this.emprendedores.</value>
        </member>
        <member name="P:Library.Contenedor.Empresas">
            <summary>
            Devuelve un valro con la lsita de las Empresas.
            </summary>
            <value>this.empresas.</value>
        </member>
        <member name="M:Library.Contenedor.AddHabilitacion(Library.Habilitacion)">
            <summary>
            Añiade una habilitacion a la lista de habilitaciones.
            </summary>
            <param name="habilitacion">parametro habilitacion que recibe AddHabilitacion.</param>
        </member>
        <member name="M:Library.Contenedor.RemoveHabiltiacion(Library.Habilitacion)">
            <summary>
            Remueve una habilitacion de la lista de habilitaciones.
            </summary>
            <param name="habilitacion">parametro habilitacion que recibe RemoveHabilitacion.</param>
        </member>
        <member name="M:Library.Contenedor.AddRubro(Library.Rubro)">
            <summary>
            Añiade un rubro a la lista de rubros.
            </summary>
            <param name="rubro">parametro rubro que recibe RemoveRubro.</param>
        </member>
        <member name="M:Library.Contenedor.RemoveRubro(Library.Rubro)">
            <summary>
            Remueve un rubro de la lista de rubros.
            </summary>
            <param name="rubro">parametro rubro que recibe RemoveRubro.</param>
        </member>
        <member name="M:Library.Contenedor.AddClasificacion(Library.Clasificacion)">
            <summary>
            Añiade una clasificacion a la lista de clasificaciones.
            </summary>
            <param name="clasificacion">parametro clasificacion que recibe AddClasificacion.</param>
        </member>
        <member name="M:Library.Contenedor.RemoveClasificacion(Library.Clasificacion)">
            <summary>
            Remueve una clasificacion de la lista de clasificaciones.
            </summary>
            <param name="clasificacion">parametro clasificacion que recibe Removelasificacion.</param>
        </member>
        <member name="M:Library.Contenedor.AddOferta(Library.Oferta)">
            <summary>
            Añiade una oferta a la lista de ofertas.
            </summary>
            <param name="oferta">parametro oferta recibido por el metodo AddOferta.</param>
        </member>
        <member name="M:Library.Contenedor.RemoveOferta(Library.Oferta)">
            <summary>
            Remueve una oferta de la lista de ofertas.
            </summary>
            <param name="oferta">parametro oferta recibido por el metodo RemoveOferta.</param>
        </member>
        <member name="M:Library.Contenedor.AddEmprendedor(Library.Emprendedor)">
            <summary>
            Agrega un Emprendedor a la lista de emprendedores.
            </summary>
            <param name="emprendedor">parametro oferta recibido por el metodo RemoverOferta.</param>
        </member>
        <member name="M:Library.Contenedor.RemoveEmprendedor(Library.Emprendedor)">
            <summary>
            Remueve un emprendedor de la lista de emprendedores.
            </summary>
            <param name="emprendedor">parametro emprendedor recibido por el metodo RemoverEmprendedor.</param>
        </member>
        <member name="M:Library.Contenedor.AddEmpresa(Library.Empresa)">
            <summary>
            Añiade una empresa a la lista de empresas.
            </summary>
            <param name="empresa">parametro empresa recibido por el metodo AgregarEmpresa.</param>
        </member>
        <member name="M:Library.Contenedor.RemoveEmpresa(Library.Empresa)">
            <summary>
            Remueve una empresa de la lista de empresas.
            </summary>
            <param name="empresa">parametro empresa recibido por el metodo RemoveEmpresa.</param>
        </member>
        <member name="T:Library.Habilitacion">
            <summary>
            Esta clase representa una Habilitacion basica.
            </summary>
        </member>
        <member name="M:Library.Habilitacion.#ctor(System.String,System.String)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Library.Habilitacion"/>.
            </summary>
            <param name="name">Parametro name que recibe el constructor de la habilitacion.</param>
            <param name="descripcion">Parametro descripcion que recibe el constructor de la habilitacion.</param>
        </member>
        <member name="P:Library.Habilitacion.Name">
            <summary>
            Obtiene un valor que indica el nombre de la habilitacion.
            </summary>
            <value>this.name.</value>
        </member>
        <member name="P:Library.Habilitacion.Descripcion">
            <summary>
            Obtiene un valor que indica la descripcion de la habilitacion.
            </summary>
            <value>this.descripcion.</value>
        </member>
        <member name="T:Library.Rubro">
            <summary>
            Clase que representa los rubros
            </summary>
        </member>
        <member name="M:Library.Rubro.#ctor(System.String,System.String,System.String)">
            <summary>
            Inicializa una instancia de la clase Rubro
            </summary>
            <param name="nombre"></param>
            <param name="area"></param>
            <param name="descripcion"></param>
        </member>
        <member name="P:Library.Rubro.Nombre">
            <summary>
            Devuelve un valor que indica el nombre del rubro
            </summary>
            <value></value>
        </member>
        <member name="P:Library.Rubro.Area">
            <summary>
            Devuelve un valor que indica el area del rubro
            </summary>
            <value></value>
        </member>
        <member name="P:Library.Rubro.Descripcion">
            <summary>
            Devuelve un valor que indica la descripcion del rubro
            </summary>
            <value></value>
        </member>
        <member name="T:Library.Busqueda">
            <summary>
            Singleton clase busqueda.
            </summary>
        </member>
        <member name="P:Library.Busqueda.Instancia">
            <summary>
            Singleton de la clase busqueda. Se asegura de que solo haya una instancia de la misma.
            </summary>
            <value></value>
        </member>
        <member name="M:Library.Busqueda.BuscarOferta(Library.Emprendedor,System.String,Library.Contenedor)">
            <summary>
            La función para buscar ofertas reciben un string con las palabras a buscar y
            revisa cada oferta para ver si las palabras claves coinciden.
            Luego comprueba si el emprendedor tiene las habilitaciones necesarias para acceder a la oferta.
            Retornando una lista temporal para que el usuario reciba solo las ofertas que coincidan.
            
            Contenedor basededatos se usa como una db temporal 
            </summary>
        </member>
        <member name="M:Library.Busqueda.BuscarOferta(Library.Emprendedor,Library.Ubicacion,Library.Contenedor)">
            <summary>
            En este caso la funcion busqueda recibe la ubicación en la que se quiere buscar
            revisa cada oferta para ver si la ubicacion coincide con ubicación buscada 
            Retornando una lista temporal para que el usuario reciba solo las ofertas que coincidan.
            
            Contenedor basededatos se usa como una db temporal
            </summary>
        </member>
        <member name="M:Library.Busqueda.BuscarOferta(Library.Emprendedor,Library.Clasificacion,Library.Contenedor)">
            <summary>
            En este caso la funcion busqueda recibe clasificacion del material
            revisa la clasificacion de los materiales de cada oferta para ver si son iguales
            Retornando una lista temporal para que el usuario reciba solo las ofertas que coincidan.
            
            Contenedor basededatos se usa como una db temporal
            </summary>
        </member>
        <member name="T:Library.Material">
            <summary>
            Clase que representa los materiales
            </summary>
        </member>
        <member name="T:Library.Ubicacion">
            <summary>
            Esta clase representa una ubicacion.
            </summary>
        </member>
        <member name="M:Library.Ubicacion.#ctor(System.String,System.String)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Library.Ubicacion"/>.
            </summary>
            <param name="ciudad">parametro ciudad que recibe el constructor.</param>
            <param name="calle">parametro calle que recibe el constructor.</param>
        </member>
        <member name="P:Library.Ubicacion.Ciudad">
            <summary>
             Obtiene o establece la ciudad.
            </summary>
            <value>this.ciudad.</value>
        </member>
        <member name="P:Library.Ubicacion.Calle">
            <summary>
            Obtiene o establece la calle.
            </summary>
            <value>this.calle.</value>
        </member>
        <member name="T:Library.Admin">
            <summary>
            Esta clase representa un Administrador de la aplicacion.
            </summary>
        </member>
        <member name="M:Library.Admin.#ctor(System.String)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Library.Admin"/>.
            </summary>
            <param name="nombre">parametro que recibe el nombre del admin.</param>
        </member>
        <member name="P:Library.Admin.Nombre">
            <summary>
            Obtiene o establece un valor que indica el nombre del admin.
            </summary>
            <value>this.nombre.</value>
        </member>
        <member name="M:Library.Admin.InvitarEmpresa(System.String)">
            <summary>
            Invita a una Empresa.
            </summary>
            <param name="userEmpresa">parametro userEmpresa que represneta el usuario de la empresa a inviatr.</param>
        </member>
        <member name="T:Library.Emprendedor">
            <summary>
            Esta clase representa un Emprendedor.
            </summary>
        </member>
        <member name="M:Library.Emprendedor.#ctor(System.String,Library.Rubro,System.String,System.String,System.String)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Library.Emprendedor"/>.
            </summary>
            <param name="nombre">parametro nombre recibido por el constructor del emprendedor.</param>
            <param name="rubro">parametro rubro recibido por el constructor del emprendedor.</param>
            <param name="ciudad">parametro ciudad recibido por el constructor del emprendedor.</param>
            <param name="calle">parametro calle recibido por el constructor del emprendedor.</param>
            <param name="especializacion">parametro especializacion recibidio por el constructor del emprendedor.</param>
        </member>
        <member name="P:Library.Emprendedor.Especializacion">
            <summary>
            Obtiene o establece un valor que indica la especializacion del emprendedor.
            </summary>
            <value>this.especializacon.</value>
        </member>
        <member name="P:Library.Emprendedor.Habilitaciones">
            <summary>
            Obtiene el valor de las habilitaciones del emprendedor.
            </summary>
            <value>this.habilitaciones.</value>
        </member>
        <member name="M:Library.Emprendedor.AddHabilitacion(Library.Habilitacion)">
            <summary>
            Agrega una habilitacion al emprendedor.
            </summary>
            <param name="habilitacion">parametro habilitaciones que recibe el metodo AddHabilitacion.</param>
        </member>
        <member name="M:Library.Emprendedor.RemoveHabilitacion(Library.Habilitacion)">
            <summary>
            Remueve una habilitacion al emprendedor.
            </summary>
            <param name="habilitacion">parametro habilitaciones que recibe el metodo RemoveHabilitacion.</param>
        </member>
        <member name="T:Library.Empresa">
            <summary>
            Clase que representa una Empresa.
            </summary>
        </member>
        <member name="M:Library.Empresa.#ctor(System.String,Library.Rubro,System.String,System.String)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Library.Empresa"/>.
            </summary>
            <param name="nombre">parametro nombre recibido por el constructor de empresa.</param>
            <param name="rubro">parametro rubro recibido por el constructor de la empresa.</param>
            <param name="ciudad">parametro ciudad recibido por el constructor de la emrpesa.</param>
            <param name="calle">parametro calle recibido por el constructor de la empresa.</param>
        </member>
        <member name="T:Library.Usuario">
            <summary>
            Esta clase representa un usuario de la aplicación.
            </summary>
        </member>
        <member name="M:Library.Usuario.#ctor(System.String,Library.Rubro,System.String,System.String)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Library.Usuario"/>.
            </summary>
            <param name="nombre">parametro nombre recibido por el constructor del usuario.</param>
            <param name="rubro">parametro rubro recibido por el constructor del usuario.</param>
            <param name="ciudad">parametro ciudad recibido por el constructor del usuario.</param>
            <param name="calle">parametro calle recibido por el constructor del usuario.</param>
        </member>
        <member name="P:Library.Usuario.Nombre">
            <summary>
            Obtiene o establece un valor el nombre del usuario.
            </summary>
            <value>this.nombre.</value>
        </member>
        <member name="P:Library.Usuario.Rubro">
            <summary>
            Obtiene o establece un valor que es el rubro del usuario.
            </summary>
            <value>this.rubro.</value>
        </member>
        <member name="P:Library.Usuario.Ubicacion">
            <summary>
            Obtiene o establece un valor que indica la ubicacion del usuario.
            </summary>
            <value>this.ubicacion.</value>
        </member>
        <member name="P:Library.Usuario.RegistroUsuario">
            <summary>
            Obtiene un valor que indica el registro del usuario.
            </summary>
            <value>this.registroUsuario.</value>
        </member>
    </members>
</doc>

<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Program</name>
    </assembly>
    <members>
        <member name="T:Ucu.Poo.TelegramBot.BaseHandler">
            <summary>
            Clase base para implementar el patrón Chain of Responsibility. En ese patrón se pasa un mensaje a través de una
            cadena de "handlers" que pueden procesar o no el mensaje. Cada "handler" decide si procesa el mensaje, o si se lo
            pasa al siguiente. Esta clase base implmementa la responsabilidad de recibir el mensaje y pasarlo al siguiente
            "handler" en caso que el mensaje no sea procesado. La responsabilidad de decidir si el mensaje se procesa o no, y
            de procesarlo, se delega a las clases sucesoras de esta clase base.
            </summary>
        </member>
        <member name="P:Ucu.Poo.TelegramBot.BaseHandler.Next">
            <summary>
            Obtiene el próximo "handler".
            </summary>
            <value>El "handler" que será invocado si este "handler" no procesa el mensaje.</value>
        </member>
        <member name="P:Ucu.Poo.TelegramBot.BaseHandler.Keywords">
            <summary>
            Obtiene o asigna el conjunto de palabras clave que este "handler" puede procesar.
            </summary>
            <value>Un array de palabras clave.</value>
        </member>
        <member name="M:Ucu.Poo.TelegramBot.BaseHandler.#ctor(Ucu.Poo.TelegramBot.IHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Ucu.Poo.TelegramBot.BaseHandler"/>.
            </summary>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:Ucu.Poo.TelegramBot.BaseHandler.#ctor(System.String[],Ucu.Poo.TelegramBot.IHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Ucu.Poo.TelegramBot.BaseHandler"/> con una lista de comandos.
            </summary>
            <param name="keywords">La lista de comandos.</param>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:Ucu.Poo.TelegramBot.BaseHandler.InternalHandle(Ucu.Poo.TelegramBot.IMessage,System.String@)">
            <summary>
            Este método debe ser sobreescrito por las clases sucesores. La clase sucesora procesa el mensaje y retorna
            true o no lo procesa y retorna false.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="responder">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario</returns>
        </member>
        <member name="M:Ucu.Poo.TelegramBot.BaseHandler.InternalCancel">
            <summary>
            Este método puede ser sobreescrito en las clases sucesores que procesan varios mensajes cambiando de estado
            entre mensajes deben sobreescribir este método para volver al estado inicial. En la clase base no hace nada.
            </summary>
        </member>
        <member name="M:Ucu.Poo.TelegramBot.BaseHandler.CanHandle(Ucu.Poo.TelegramBot.IMessage)">
            <summary>
            Determina si este "handler" puede procesar el mensaje. En la clase base se utiliza el array
            <see cref="P:Ucu.Poo.TelegramBot.BaseHandler.Keywords"/> para buscar el texto en el mensaje ignorando mayúsculas y minúsculas. Las
            clases sucesores pueden sobreescribir este método para proveer otro mecanismo para determina si procesan o no
            un mensaje.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <returns>true si el mensaje puede ser pocesado; false en caso contrario.</returns>
        </member>
        <member name="M:Ucu.Poo.TelegramBot.BaseHandler.Handle(Ucu.Poo.TelegramBot.IMessage,System.String@)">
            <summary>
            Procesa el mensaje o la pasa al siguiente "handler" si existe.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>El "handler" que procesó el mensaje si el mensaje fue procesado; null en caso contrario.</returns>
        </member>
        <member name="M:Ucu.Poo.TelegramBot.BaseHandler.Cancel">
            <summary>
            Retorna este "handler" al estado inicial. En los "handler" sin estado no hace nada. Los "handlers" que
            procesan varios mensajes cambiando de estado entre mensajes deben sobreescribir este método para volver al
            estado inicial.
            </summary>
        </member>
        <member name="T:Ucu.Poo.TelegramBot.BuscarHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que implementa el comando "chau".
            </summary>
        </member>
        <member name="F:Ucu.Poo.TelegramBot.BuscarHandler.emprendedor">
            <summary>
            El usuario que busca ofertas.
            </summary>
        </member>
        <member name="F:Ucu.Poo.TelegramBot.BuscarHandler.db">
            <summary>
            base de datos.
            </summary>
        </member>
        <member name="F:Ucu.Poo.TelegramBot.BuscarHandler.buscador">
            <summary>
            Buscador de ofertas.
            </summary>
        </member>
        <member name="M:Ucu.Poo.TelegramBot.BuscarHandler.#ctor(Ucu.Poo.TelegramBot.BaseHandler,Library.Busqueda,Library.Emprendedor,Library.Contenedor)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Ucu.Poo.TelegramBot.BuscarHandler"/>. Esta clase procesa el mensaje "chau"
            y el mensaje "adiós" -un ejemplo de cómo un "handler" puede procesar comandos con sinónimos.
            </summary>
            <param name="next">El próximo "handler".</param>
            <param name="emprendedor">El emprendedor.</param>
            <param name="db">El contenedor de datos.</param>
            <param name="buscador">El buscador.</param>
        </member>
        <member name="M:Ucu.Poo.TelegramBot.BuscarHandler.InternalHandle(Ucu.Poo.TelegramBot.IMessage,System.String@)">
            <summary>
            Procesa el mensaje "chau" y retorna true; retorna false en caso contrario.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario.</returns>
        </member>
        <member name="T:Ucu.Poo.TelegramBot.BuscarUbiHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que implementa el comando "chau".
            </summary>
        </member>
        <member name="F:Ucu.Poo.TelegramBot.BuscarUbiHandler.emprendedor">
            <summary>
            El usuario que busca ofertas.
            </summary>
        </member>
        <member name="F:Ucu.Poo.TelegramBot.BuscarUbiHandler.db">
            <summary>
            base de datos.
            </summary>
        </member>
        <member name="F:Ucu.Poo.TelegramBot.BuscarUbiHandler.buscador">
            <summary>
            Buscador de ofertas.
            </summary>
        </member>
        <member name="M:Ucu.Poo.TelegramBot.BuscarUbiHandler.#ctor(Ucu.Poo.TelegramBot.BaseHandler,Library.Busqueda,Library.Emprendedor,Library.Contenedor)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Ucu.Poo.TelegramBot.BuscarHandler"/>. Esta clase procesa el mensaje "chau"
            y el mensaje "adiós" -un ejemplo de cómo un "handler" puede procesar comandos con sinónimos.
            </summary>
            <param name="next">El próximo "handler".</param>
            <param name="emprendedor">El emprendedor.</param>
            <param name="db">El contenedor de datos.</param>
            <param name="buscador">El buscador.</param>
        </member>
        <member name="M:Ucu.Poo.TelegramBot.BuscarUbiHandler.InternalHandle(Ucu.Poo.TelegramBot.IMessage,System.String@)">
            <summary>
            Procesa el mensaje "chau" y retorna true; retorna false en caso contrario.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario.</returns>
        </member>
        <member name="T:Ucu.Poo.TelegramBot.GoodByeHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que implementa el comando "chau".
            </summary>
        </member>
        <member name="M:Ucu.Poo.TelegramBot.GoodByeHandler.#ctor(Ucu.Poo.TelegramBot.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Ucu.Poo.TelegramBot.GoodByeHandler"/>. Esta clase procesa el mensaje "chau"
            y el mensaje "adiós" -un ejemplo de cómo un "handler" puede procesar comandos con sinónimos.
            </summary>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:Ucu.Poo.TelegramBot.GoodByeHandler.InternalHandle(Ucu.Poo.TelegramBot.IMessage,System.String@)">
            <summary>
            Procesa el mensaje "chau" y retorna true; retorna false en caso contrario.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario.</returns>
        </member>
        <member name="T:Ucu.Poo.TelegramBot.HelloHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que implementa el comando "hola".
            </summary>
        </member>
        <member name="M:Ucu.Poo.TelegramBot.HelloHandler.#ctor(Ucu.Poo.TelegramBot.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Ucu.Poo.TelegramBot.HelloHandler"/>. Esta clase procesa el mensaje "hola".
            </summary>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:Ucu.Poo.TelegramBot.HelloHandler.InternalHandle(Ucu.Poo.TelegramBot.IMessage,System.String@)">
            <summary>
            Procesa el mensaje "hola" y retorna true; retorna false en caso contrario.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario.</returns>
        </member>
        <member name="T:Ucu.Poo.TelegramBot.IHandler">
            <summary>
            Interfaz para implementar el patrón Chain of Responsibility. En ese patrón se pasa un mensaje a través de una
            cadena de "handlers" que pueden procesar o no el mensaje. Cada "handler" decide si procesa el mensaje, o si se lo
            pasa al siguiente. Esta interfaz define un atributo para definir el próximo "handler" y una una operación para
            recibir el mensaje y pasarlo al siguiente "handler" en caso que el mensaje no sea procesado. La responsabilidad de
            decidir si el mensaje se procesa o no, y de procesarlo, se realiza en las clases que implementan esta interfaz.
            <remarks>
            La interfaz se crea en función del principio de inversión de dependencias, para que los clientes de la cadena de
            responsabilidad, que pueden ser concretos, no dependan de una clase "handler" que potencialmente es abstracta.
            </remarks>
            </summary>
        </member>
        <member name="P:Ucu.Poo.TelegramBot.IHandler.Next">
            <summary>
            Obtiene el próximo "handler".
            </summary>
            <value>El "handler" que será invocado si este "handler" no procesa el mensaje.</value>
        </member>
        <member name="M:Ucu.Poo.TelegramBot.IHandler.Handle(Ucu.Poo.TelegramBot.IMessage,System.String@)">
            <summary>
            Procesa el mensaje o la pasa al siguiente "handler" si existe.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>El "handler" que procesó el mensaje si el mensaje fue procesado; null en caso contrario.</returns>
        </member>
        <member name="M:Ucu.Poo.TelegramBot.IHandler.Cancel">
            <summary>
            Retorna este "handler" al estado inicial y cancela el próximo "handler" si existe. Es utilizado para que los
            "handlers" que procesan varios mensajes cambiando de estado entre mensajes puedan volver al estado inicial en
            caso de error por ejemplo.
            </summary>
        </member>
        <member name="T:Ucu.Poo.TelegramBot.IMessage">
            <summary>
            Interfaz de mensajes.
            </summary>
        </member>
        <member name="P:Ucu.Poo.TelegramBot.IMessage.ID">
            <summary>
            Id del usuario.
            </summary>
        </member>
        <member name="P:Ucu.Poo.TelegramBot.IMessage.Text">
            <summary>
            Mensaje.
            </summary>
        </member>
        <member name="T:Ucu.Poo.TelegramBot.Impresora">
            <summary>
            Clase impresora, se encarga de hacer un string con las ofertas que cumplen con los requisitos de la busqueda.
            </summary>
        </member>
        <member name="F:Ucu.Poo.TelegramBot.Impresora.texto">
            <summary>
            Texto que se va a imprimir.
            </summary>
        </member>
        <member name="P:Ucu.Poo.TelegramBot.Impresora.Instancia">
            <summary>
            Obtiene una instancia de la clase impresora y si no existe una, crea una nueva.
            </summary>
            <value>una instancia de impresora.</value>
        </member>
        <member name="M:Ucu.Poo.TelegramBot.Impresora.Imprimir(System.Collections.ObjectModel.Collection{Library.Oferta})">
            <summary>
            Funcion que recibe la lista de ofertas para imprimir.
            </summary>
            <param name="lista">lista buscada.</param>
            <returns></returns>
        </member>
        <member name="T:Ucu.Poo.TelegramBot.Program">
            <summary>
            Un programa que implementa un bot de Telegram.
            </summary>
        </member>
        <member name="M:Ucu.Poo.TelegramBot.Program.Main">
            <summary>
            Punto de entrada al programa.
            </summary>
        </member>
        <member name="M:Ucu.Poo.TelegramBot.Program.HandleUpdateAsync(Telegram.Bot.Types.Update,System.Threading.CancellationToken)">
            <summary>
            Maneja las actualizaciones del bot (todo lo que llega), incluyendo mensajes, ediciones de mensajes,
            respuestas a botones, etc. En este ejemplo sólo manejamos mensajes de texto.
            </summary>
        </member>
        <member name="M:Ucu.Poo.TelegramBot.Program.HandleMessageReceived(Telegram.Bot.Types.Message)">
            <summary>
            Maneja los mensajes que se envían al bot.
            Lo único que hacemos por ahora es escuchar 3 tipos de mensajes:
            - "hola": responde con texto
            - "chau": responde con texto
            - "foto": responde con una foto
            </summary>
            <param name="message">El mensaje recibido</param>
            <returns></returns>
        </member>
        <member name="M:Ucu.Poo.TelegramBot.Program.HandleErrorAsync(System.Exception,System.Threading.CancellationToken)">
            <summary>
            Manejo de excepciones. Por ahora simplemente la imprimimos en la consola.
            </summary>
        </member>
        <member name="T:Ucu.Poo.TelegramBot.TelegramMSGadapter">
            <summary>
            Adaptador de mensajes de Telegram a mensajes de la interfaz de usuario.
            </summary>
        </member>
        <member name="M:Ucu.Poo.TelegramBot.TelegramMSGadapter.#ctor(Telegram.Bot.Types.Message)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Ucu.Poo.TelegramBot.TelegramMSGadapter"/>.
            </summary>
            <param name="message">mensaje recibido.</param>
        </member>
        <member name="P:Ucu.Poo.TelegramBot.TelegramMSGadapter.Text">
            <summary>
            Mensaje recibido.
            </summary>
        </member>
        <member name="P:Ucu.Poo.TelegramBot.TelegramMSGadapter.ID">
            <summary>
            Identificador del usuario que envió el mensaje.
            </summary>
        </member>
    </members>
</doc>
